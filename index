<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SOL/USD Trading Bot</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #111827; /* Dark Gray */
            color: #E5E7EB; /* Light Gray */
        }
        .log-entry {
            border-bottom: 1px solid #374151;
            padding: 6px 0;
            font-size: 0.8rem;
            line-height: 1.2;
        }
        .log-info { color: #34D399; } /* Green */
        .log-debug { color: #60A5FA; } /* Blue */
        .log-warning { color: #FBBF24; } /* Yellow */
        .log-error { color: #F87171; } /* Red */
        .status-badge {
            padding: 2px 8px;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        .status-long { background-color: #10B981; color: #ffffff; } /* Green */
        .status-short { background-color: #EF4444; color: #ffffff; } /* Red */
        .status-none { background-color: #6B7280; color: #ffffff; } /* Gray */

        .metric-value {
            font-weight: 700;
            font-size: 1.25rem;
            color: #ffffff;
        }
        .metric-label {
            font-size: 0.8rem;
            color: #9CA3AF;
            text-transform: uppercase;
        }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <header class="mb-8 p-4 bg-gray-900/50 rounded-lg border border-gray-700 backdrop-blur-sm">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="flex items-center space-x-4">
                    <svg class="w-10 h-10 text-purple-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z" />
                    </svg>
                    <div>
                        <h1 class="text-2xl font-bold text-white">SOL/USD Paper Trading Bot</h1>
                        <p class="text-sm text-gray-400">Live Status & Logs</p>
                    </div>
                </div>
                <div id="status-indicator" class="mt-4 md:mt-0 px-4 py-2 rounded-full flex items-center space-x-2 bg-gray-800 border border-gray-700">
                    <div id="status-light" class="w-3 h-3 rounded-full bg-yellow-400 animate-pulse"></div>
                    <span id="status-text" class="text-sm font-medium text-yellow-300">Initializing...</span>
                </div>
            </div>
        </header>

        <!-- Main Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Left Column: Portfolio & Controls -->
            <div class="lg:col-span-1 space-y-6">
                <!-- Portfolio Status -->
                <div class="bg-gray-800/80 rounded-lg p-6 border border-gray-700">
                    <h2 class="text-lg font-semibold mb-4 text-white">Portfolio</h2>
                    <div class="space-y-4">
                        <div>
                            <p class="metric-label">Cash</p>
                            <p id="portfolio-cash" class="metric-value">$0.00</p>
                        </div>
                        <div>
                            <p class="metric-label">Position</p>
                            <div class="flex items-center space-x-3">
                                <span id="portfolio-position-type" class="status-badge status-none">None</span>
                                <p id="portfolio-position-size" class="text-white font-medium">0.00 SOL</p>
                            </div>
                        </div>
                         <div>
                            <p class="metric-label">Entry Price</p>
                            <p id="portfolio-entry-price" class="metric-value">$0.00</p>
                        </div>
                        <div>
                            <p class="metric-label">Current P/L</p>
                            <p id="portfolio-pnl" class="metric-value text-gray-400">$0.00</p>
                        </div>
                    </div>
                </div>

                 <!-- Market Status -->
                 <div class="bg-gray-800/80 rounded-lg p-6 border border-gray-700">
                    <h2 class="text-lg font-semibold mb-4 text-white">Market Data</h2>
                    <div class="grid grid-cols-2 gap-4">
                       <div>
                           <p class="metric-label">Current Price</p>
                           <p id="market-price" class="metric-value">$0.00</p>
                       </div>
                       <div>
                           <p class="metric-label">ATR</p>
                           <p id="market-atr" class="metric-value">0.00</p>
                       </div>
                       <div>
                           <p class="metric-label">Smoothed RSI</p>
                           <p id="market-rsi" class="metric-value">0.00</p>
                       </div>
                    </div>
                </div>
            </div>

            <!-- Right Column: Logs -->
            <div class="lg:col-span-2 bg-gray-800/80 rounded-lg border border-gray-700">
                <div class="p-6 border-b border-gray-700">
                     <h2 class="text-lg font-semibold text-white">Activity Log</h2>
                </div>
                <div id="log-container" class="p-6 h-96 overflow-y-auto flex flex-col-reverse">
                    <!-- Log entries will be added here -->
                </div>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {

        // --- Configuration ---
        const config = {
            pair: "solana", // Use CoinGecko ID for the pair
            vs_currency: "usd",
            leverage: 1,
            fee: 0.002,
            slippage: 0.001,
            initial_cash: 120000,
            interval_seconds: 60,
            min_data_points: 100,
            trade_cooldown_seconds: 60,
            min_atr: 0.0,
            trade_size_usd: 120000,
            enable_long_trades: true,
            enable_short_trades: true,
            use_atr_stop_loss: true,
            atr_multiplier_sl: 1.5,
            use_atr_take_profit: true,
            atr_multiplier_tp: 2.5,
            use_trend_filter: true,
            trend_filter_period: 100,
            long_rsi_threshold: 65,
            short_rsi_threshold: 35,
            use_mean_reversion_long: true,
            mean_reversion_rsi_long: 35,
        };

        // --- State Management ---
        let portfolio = {
            position_size: 0,
            entry_price: 0,
            margin_used: 0,
            entry_timestamp: null,
            position_type: null,
            cash: config.initial_cash,
            last_trade_time: null,
            stop_loss_price: null,
            take_profit_price: null
        };
        let historicalData = [];

        // --- UI Elements ---
        const logContainer = document.getElementById('log-container');
        const statusLight = document.getElementById('status-light');
        const statusText = document.getElementById('status-text');
        const portfolioCashEl = document.getElementById('portfolio-cash');
        const portfolioPositionTypeEl = document.getElementById('portfolio-position-type');
        const portfolioPositionSizeEl = document.getElementById('portfolio-position-size');
        const portfolioEntryPriceEl = document.getElementById('portfolio-entry-price');
        const portfolioPnlEl = document.getElementById('portfolio-pnl');
        const marketPriceEl = document.getElementById('market-price');
        const marketAtrEl = document.getElementById('market-atr');
        const marketRsiEl = document.getElementById('market-rsi');

        // --- Logging Function ---
        function log(message, level = 'debug') {
            const entry = document.createElement('div');
            entry.classList.add('log-entry', `log-${level}`);
            const timestamp = new Date().toISOString();
            entry.innerHTML = `<span class="font-mono text-gray-500">${timestamp}</span> <span class="font-medium">[${level.toUpperCase()}]</span> ${message}`;
            logContainer.prepend(entry);
            if (logContainer.children.length > 200) {
                logContainer.removeChild(logContainer.lastChild);
            }
        }

        // --- API Fetching (MODIFIED TO USE COINGECKO) ---
        async function fetchOhlc(pairId, vsCurrency) {
            // CoinGecko provides minute data for the last 7 days. We fetch this on the first run.
            // On subsequent runs, we'll fetch only the latest price to keep things current.
            const url = `https://api.coingecko.com/api/v3/coins/${pairId}/ohlc?vs_currency=${vsCurrency}&days=7`;
            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                if (!Array.isArray(data) || data.length === 0) {
                     throw new Error('Invalid data format received from CoinGecko API.');
                }
                return data;
            } catch (error) {
                log(`Failed to fetch OHLC data: ${error.message}`, 'error');
                updateStatus('API Error', 'bg-red-500', 'text-red-300');
                return null;
            }
        }

        // --- Indicator Calculations ---
        function calculateIndicators(data) {
             const ema = (source, period) => {
                if (!source || source.length < period) return new Array(source.length).fill(NaN);
                let emaArray = new Array(source.length).fill(NaN);
                let multiplier = 2 / (period + 1);
                let firstValidIndex = source.findIndex(val => !isNaN(val));
                if (firstValidIndex === -1 || source.length < firstValidIndex + period) return emaArray;
                
                let sma = source.slice(firstValidIndex, firstValidIndex + period).reduce((a, b) => a + b, 0) / period;
                emaArray[firstValidIndex + period - 1] = sma;

                for (let i = firstValidIndex + period; i < source.length; i++) {
                     if (isNaN(source[i]) || isNaN(emaArray[i-1])) {
                        emaArray[i] = emaArray[i - 1];
                        continue;
                    }
                    emaArray[i] = (source[i] - emaArray[i - 1]) * multiplier + emaArray[i - 1];
                }
                return emaArray;
            };

            let df = JSON.parse(JSON.stringify(data));
            const closes = df.map(d => d.close);
            
            df.forEach((d, i) => d.ema5 = ema(closes, 5)[i]);
            df.forEach((d, i) => d.ema10 = ema(closes, 10)[i]);
            df.forEach((d, i) => d.ema20 = ema(closes, 20)[i]);

            if (config.use_trend_filter) {
                const emaTrend = ema(closes, config.trend_filter_period);
                df.forEach((d, i) => d[`ema${config.trend_filter_period}`] = emaTrend[i]);
            }

            for (let i = 0; i < df.length; i++) {
                const curr = df[i];
                const prev = i > 0 ? df[i - 1] : null;
                curr.ha_close = (curr.open + curr.high + curr.low + curr.close) / 4;
                curr.ha_open = prev && prev.ha_open ? (prev.ha_open + prev.ha_close) / 2 : (curr.open + curr.close) / 2;
                curr.ha_bullish = curr.ha_close > curr.ha_open;
            }
            
            const rsiPeriod = 14;
            let deltas = df.map((d, i) => i > 0 ? d.close - df[i-1].close : 0);
            let gains = deltas.map(d => d > 0 ? d : 0);
            let losses = deltas.map(d => d < 0 ? -d : 0);

            let avgGain = ema(gains, rsiPeriod);
            let avgLoss = ema(losses, rsiPeriod);
            
            const rsiVals = avgGain.map((g, i) => {
                const l = avgLoss[i];
                if (isNaN(g) || isNaN(l)) return NaN;
                if (l === 0) return 100;
                const rs = g / l;
                return 100 - (100 / (1 + rs));
            });

            const smoothedRsiVals = ema(rsiVals, 5);
            df.forEach((d, i) => d.smoothed_rsi = smoothedRsiVals[i]);
            
            const atrPeriod = 14;
            let tr = new Array(df.length).fill(NaN);
            for(let i = 1; i < df.length; i++) {
                tr[i] = Math.max(df[i].high - df[i].low, Math.abs(df[i].high - df[i-1].close), Math.abs(df[i].low - df[i-1].close));
            }
            const atrValues = ema(tr, atrPeriod);
            df.forEach((d, i) => d.atr = atrValues[i]);

            return df;
        }

        // --- Core Trading Logic ---
        function processTradingLogic(df) {
            const timestamp = new Date();
            if (df.length < config.min_data_points) return;
            
            const latest = df[df.length - 1];
            if (!latest || isNaN(latest.atr) || isNaN(latest.smoothed_rsi)) {
                log("Latest data point is missing required indicators. Skipping tick.", "warning");
                return;
            }

            const price = latest.close;
            const atr = latest.atr;

            marketPriceEl.textContent = `$${price.toFixed(2)}`;
            marketAtrEl.textContent = atr.toFixed(4);
            marketRsiEl.textContent = latest.smoothed_rsi.toFixed(2);

            if (portfolio.position_size > 0) {
                let pnl = (portfolio.position_type === 'long') 
                    ? (price - portfolio.entry_price) * portfolio.position_size
                    : (portfolio.entry_price - price) * portfolio.position_size;
                updatePnlUI(pnl);

                let exit_reason = null;

                if (config.use_atr_stop_loss && portfolio.stop_loss_price) {
                    if ((portfolio.position_type === 'long' && price <= portfolio.stop_loss_price) || (portfolio.position_type === 'short' && price >= portfolio.stop_loss_price)) {
                        exit_reason = `Stop-Loss triggered at $${price.toFixed(2)}`;
                    }
                }
                if (!exit_reason && config.use_atr_take_profit && portfolio.take_profit_price) {
                    if ((portfolio.position_type === 'long' && price >= portfolio.take_profit_price) || (portfolio.position_type === 'short' && price <= portfolio.take_profit_price)) {
                        exit_reason = `Take-Profit triggered at $${price.toFixed(2)}`;
                    }
                }

                if (exit_reason) {
                    pnl -= (Math.abs(price * portfolio.position_size) * (config.fee + config.slippage));
                    portfolio.cash += portfolio.margin_used + pnl;
                    log(`EXIT ${portfolio.position_type.toUpperCase()} at $${price.toFixed(2)} for P/L of $${pnl.toFixed(2)}. Reason: ${exit_reason}`, 'info');
                    
                    Object.assign(portfolio, {
                        position_size: 0, margin_used: 0, entry_timestamp: null,
                        position_type: null, last_trade_time: timestamp,
                        stop_loss_price: null, take_profit_price: null, entry_price: 0
                    });
                    updatePortfolioUI();
                }
                return;
            }

            if (portfolio.position_size === 0) {
                updatePnlUI(0);
                if (portfolio.last_trade_time && (timestamp.getTime() - portfolio.last_trade_time.getTime()) < config.trade_cooldown_seconds * 1000) return;
                if (atr < config.min_atr) return;
                
                const smoothed_rsi = latest.smoothed_rsi;
                let trade_type = null;

                if (config.enable_long_trades) {
                    const trend_ok_long = !config.use_trend_filter || price > latest[`ema${config.trend_filter_period}`];
                    if (trend_ok_long) {
                        if (config.use_mean_reversion_long) {
                            if (df.length > 1 && latest.ha_bullish && !df[df.length - 2].ha_bullish && smoothed_rsi < config.mean_reversion_rsi_long) {
                                trade_type = 'long';
                            }
                        } else {
                            if (latest.ema10 > latest.ema20 && latest.ha_bullish && smoothed_rsi > config.long_rsi_threshold) {
                                trade_type = 'long';
                            }
                        }
                    }
                }

                if (!trade_type && config.enable_short_trades) {
                    const trend_ok_short = !config.use_trend_filter || price < latest[`ema${config.trend_filter_period}`];
                    if (trend_ok_short && latest.ema10 < latest.ema20 && !latest.ha_bullish && smoothed_rsi < config.short_rsi_threshold) {
                        trade_type = 'short';
                    }
                }

                if (trade_type) {
                    const margin_to_use = config.trade_size_usd;
                    if (portfolio.cash < margin_to_use) {
                        log('Skipping trade: Insufficient cash', 'warning');
                        return;
                    }
                    
                    const size = (margin_to_use * config.leverage) / price;
                    let stop_loss_price = null, take_profit_price = null;

                    if (config.use_atr_stop_loss) {
                        const sl_distance = atr * config.atr_multiplier_sl;
                        stop_loss_price = (trade_type === 'long') ? price - sl_distance : price + sl_distance;
                    }
                    if (config.use_atr_take_profit) {
                        const tp_distance = atr * config.atr_multiplier_tp;
                        take_profit_price = (trade_type === 'long') ? price + tp_distance : price - tp_distance;
                    }
                    
                    Object.assign(portfolio, {
                         position_size: size, entry_price: price, margin_used: margin_to_use,
                         entry_timestamp: timestamp, position_type: trade_type,
                         cash: portfolio.cash - margin_to_use, last_trade_time: timestamp,
                         stop_loss_price, take_profit_price
                    });

                    log(`ENTRY ${trade_type.toUpperCase()}: Size ${size.toFixed(4)} at $${price.toFixed(2)} | SL: ${stop_loss_price ? stop_loss_price.toFixed(2) : 'N/A'} | TP: ${take_profit_price ? take_profit_price.toFixed(2) : 'N/A'}`, 'info');
                    updatePortfolioUI();
                }
            }
        }
        
        // --- UI Update Functions ---
        function updatePortfolioUI() {
            portfolioCashEl.textContent = `$${portfolio.cash.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
            portfolioPositionTypeEl.textContent = portfolio.position_type || 'None';
            portfolioPositionTypeEl.className = `status-badge status-${portfolio.position_type || 'none'}`;
            portfolioPositionSizeEl.textContent = `${portfolio.position_size.toFixed(4)} ${config.pair}`;
            portfolioEntryPriceEl.textContent = `$${portfolio.entry_price.toFixed(2)}`;
        }
        
        function updatePnlUI(pnl) {
            portfolioPnlEl.textContent = `$${pnl.toFixed(2)}`;
            portfolioPnlEl.className = `metric-value ${pnl > 0 ? 'text-green-400' : pnl < 0 ? 'text-red-400' : 'text-gray-400'}`;
        }
        
        function updateStatus(message, lightClass, textClass) {
            statusText.textContent = message;
            statusLight.className = `w-3 h-3 rounded-full ${lightClass}`;
            statusText.className = `text-sm font-medium ${textClass}`;
        }
        
        // --- Main Application Loop ---
        async function mainLoop() {
            updateStatus('Fetching Data...', 'bg-blue-400 animate-pulse', 'text-blue-300');
            
            const new_ohlc_data = await fetchOhlc(config.pair, config.vs_currency);

            if (new_ohlc_data) {
                // Convert CoinGecko format to our internal format
                historicalData = new_ohlc_data.map(d => ({
                    timestamp: d[0],
                    open: d[1],
                    high: d[2],
                    low: d[3],
                    close: d[4]
                }));
                
                if (historicalData.length >= config.min_data_points) {
                    const df_with_indicators = calculateIndicators(historicalData);
                    processTradingLogic(df_with_indicators);
                    updateStatus('Monitoring...', 'bg-green-400', 'text-green-300');
                } else {
                    updateStatus(`Waiting for more data... (${historicalData.length}/${config.min_data_points})`, 'bg-yellow-400 animate-pulse', 'text-yellow-300');
                }
            }
        }
        
        // --- Initialization ---
        log("Bot script initialized. Awaiting first data fetch...", 'info');
        updatePortfolioUI();
        mainLoop();
        setInterval(mainLoop, config.interval_seconds * 1000);
    });
    </script>
</body>
</html>
